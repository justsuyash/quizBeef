datasource db {
  provider = "postgresql"
  // Wasp requires that the url is set to the DATABASE_URL environment variable.
  url      = env("DATABASE_URL")
}

// Wasp requires the `prisma-client-js` generator to be present.
generator client {
  provider = "prisma-client-js"
}

model User {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  isActive                  Boolean       @default(true)
  
  // Phase 1.1 Quiz Beef fields
  handle                    String?       @unique  // e.g., "quiz_master" (displayed as @quiz_master)
  profileType               ProfileType   @default(ADULT)
  accountType               AccountType   @default(FREE)
  // Location & Rating
  city                      String?
  county                    String?
  country                   String?
  eloRating                 Int           @default(1200)
  
  // Relations
  folders                   Folder[]
  documents                 Document[]
  quizAttempts             QuizAttempt[]
  questionHistory          UserQuestionHistory[]
  
  // Phase 4: Beef Relations
  createdBeefs              BeefChallenge[] @relation("CreatedBeefs")
  beefParticipations        BeefParticipant[]
  
  // Phase 3: Achievements Relations
  achievements              UserAchievement[]
  eloHistory                EloHistory[]
  
  // Profile & Achievement fields
  email                     String?
  name                      String?
  dateOfBirth               DateTime?
  language                  String?
  bio                       String?
  location                  String?
  website                   String?
  joinedAt                  DateTime      @default(now())
  totalScore                Int           @default(0)
  totalQuizzes              Int           @default(0)
  totalBeefWins             Int           @default(0)
  winStreak                 Int           @default(0)
  longestWinStreak          Int           @default(0)
  averageAccuracy           Float?
  favoriteSubject           String?
  isPublicProfile           Boolean       @default(true)
}

enum ProfileType {
  ADULT
  KID
}

enum AccountType {
  FREE
  PREMIUM
  KIDS
  KIDS_PREMIUM
  FAMILY
}

enum SourceType {
  PDF
  YOUTUBE
  WEB_ARTICLE
  TEXT_INPUT
}

model Folder {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  
  name                      String
  color                     String?       // Hex color for folder display
  description               String?
  sampleQuestion            String?       // Style guide for quiz generation
  
  // Relations
  userId                    Int
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents                 Document[]
  
  @@unique([userId, name])  // Unique folder names per user
}

model Document {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  
  title                     String
  contentJson               Json          // Structured content for AI processing
  sourceType                SourceType    
  sourceUrl                 String?       // Original source URL
  wordCount                 Int?
  estimatedReadTime         Int?          // in minutes
  
  // Organization
  folderId                  Int?          // Optional folder organization
  tags                      String[]      // Tags for categorization
  category                  String?       // Topic/category (e.g., Science, History)
  
  // Relations
  userId                    Int
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder                    Folder?       @relation(fields: [folderId], references: [id], onDelete: SetNull)
  quizAttempts             QuizAttempt[]
  questions                Question[]
  beefChallenges           BeefChallenge[]
}

enum QuizMode {
  PRACTICE
  NEW_QUESTIONS
  BEEF_CHALLENGE
  SPEED_ROUND
  RAPID_FIRE
  FLASHCARD_FRENZY
  TEST_MODE
  TIME_ATTACK
  PRECISION
  STUDY_MODE
  TRENDING
  AI_CURATED
}

model QuizAttempt {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  completedAt               DateTime?
  startTime                 DateTime?     // When user started the quiz
  endTime                   DateTime?     // When user ended the quiz
  
  score                     Float         // Percentage score
  totalQuestions            Int
  correctAnswers            Int
  timeSpent                 Int           // in seconds
  quizMode                  QuizMode      @default(PRACTICE)
  
  // Game mode specific fields
  timeLimit                 Int?          // Time limit in seconds (for timed modes)
  averageConfidence         Float?        // For flashcard frenzy mode
  perfectStreak             Int           @default(0)  // Consecutive correct answers
  longestStreak             Int           @default(0)  // Best streak in this attempt
  bonusPoints               Int           @default(0)  // Extra points from streaks/speed
  difficultyDistribution    Json?         // Track questions by difficulty
  
  // Relations
  userId                    Int
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documentId                Int
  document                  Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  questionHistory          UserQuestionHistory[]
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  FILL_IN_BLANK
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

model Question {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  
  questionText              String
  questionType              QuestionType  @default(MULTIPLE_CHOICE)
  difficulty                Difficulty    @default(MEDIUM)
  explanation               String?       // Why this answer is correct
  
  // Quality tracking
  upvotes                   Int           @default(0)
  downvotes                 Int           @default(0)
  timesAsked                Int           @default(0)
  correctRate               Float?        // Percentage of correct answers
  
  // Relations
  documentId                Int
  document                  Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  answers                   Answer[]
  questionHistory          UserQuestionHistory[]
  beefRounds               BeefRound[]
}

model Answer {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  
  answerText                String
  isCorrect                 Boolean       @default(false)
  explanation               String?       // Why this answer is right/wrong
  orderIndex                Int           // For multiple choice ordering
  
  // Relations
  questionId                Int
  question                  Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  beefAnswers              BeefAnswer[]
}

model UserQuestionHistory {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  
  wasCorrect                Boolean
  timeSpent                 Int           // in seconds
  timeToAnswer              Int?          // in milliseconds (fine-grained speed)
  selectedAnswerId          Int?          // Which answer they chose
  confidenceLevel           Int?          // 1-5 scale
  
  // Relations
  userId                    Int
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId                Int
  question                  Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quizAttemptId             Int?
  quizAttempt               QuizAttempt?  @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  
  @@unique([userId, questionId, createdAt])
}

// Phase 4: Social Beef Models
model BeefChallenge {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  
  challengeCode             String        @unique // Short code for joining (e.g., "BEEF42")
  title                     String?       // Optional challenge title
  status                    BeefStatus    @default(WAITING)
  maxParticipants           Int           @default(2)
  timeLimit                 Int           @default(60) // seconds per question
  questionCount             Int           @default(10)
  
  // Challenge settings
  difficultyDistribution    Json?         // Easy/Medium/Hard percentages
  isPrivate                 Boolean       @default(false)
  expiresAt                 DateTime      // When the challenge code expires
  
  // Relations
  documentId                Int
  document                  Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  creatorId                 Int
  creator                   User          @relation("CreatedBeefs", fields: [creatorId], references: [id], onDelete: Cascade)
  
  participants              BeefParticipant[]
  rounds                    BeefRound[]
  
  @@index([challengeCode])
  @@index([status])
}

model BeefParticipant {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  
  joinedAt                  DateTime      @default(now())
  isReady                   Boolean       @default(false)
  finalScore                Int           @default(0)
  totalTimeSpent            Int           @default(0) // in milliseconds
  position                  Int?          // Final ranking (1st, 2nd, etc.)
  
  // Relations
  userId                    Int
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId               Int
  challenge                 BeefChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  answers                   BeefAnswer[]
  
  @@unique([userId, challengeId])
}

model BeefRound {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  
  roundNumber               Int           // 1, 2, 3, etc.
  startedAt                 DateTime?
  endedAt                   DateTime?
  timeLimit                 Int           // seconds for this round
  
  // Relations
  challengeId               Int
  challenge                 BeefChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  questionId                Int
  question                  Question      @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  answers                   BeefAnswer[]
  
  @@unique([challengeId, roundNumber])
}

model BeefAnswer {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  
  answeredAt                DateTime      @default(now())
  timeSpent                 Int           // milliseconds to answer
  isCorrect                 Boolean
  pointsEarned              Int           @default(0) // Points including time bonus
  
  // Relations
  participantId             Int
  participant               BeefParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  roundId                   Int
  round                     BeefRound     @relation(fields: [roundId], references: [id], onDelete: Cascade)
  selectedAnswerId          Int?
  selectedAnswer            Answer?       @relation(fields: [selectedAnswerId], references: [id], onDelete: SetNull)
  
  @@unique([participantId, roundId])
}

enum BeefStatus {
  WAITING       // Waiting for participants
  STARTING      // Countdown before starting
  IN_PROGRESS   // Game in progress
  COMPLETED     // Game finished
  CANCELLED     // Game cancelled
}

// Phase 3: Achievements & Rewards System
model Achievement {
  id                        Int           @id @default(autoincrement())
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  
  // Achievement Definition
  key                       String        @unique  // Unique identifier (e.g., "FIRST_QUIZ_COMPLETED")
  name                      String                 // Display name (e.g., "Quiz Rookie")
  description               String                 // Description (e.g., "Complete your first quiz")
  category                  AchievementCategory    // Group achievements by type
  
  // Visual & UI
  iconName                  String                 // Icon identifier for UI
  iconColor                 String        @default("#3B82F6")  // Hex color for the icon
  rarity                    AchievementRarity @default(COMMON)  // How rare/special this achievement is
  
  // Unlock Criteria (stored as JSON for flexibility)
  criteria                  Json                   // { "type": "QUIZ_COUNT", "target": 1, "conditions": {} }
  
  // Rewards (optional)
  pointsReward              Int           @default(0)          // Points awarded for unlocking
  
  // Status
  isActive                  Boolean       @default(true)      // Can this achievement be earned?
  isHidden                  Boolean       @default(false)     // Hidden until unlocked (secret achievements)
  
  // Relations
  userAchievements          UserAchievement[]
  
  @@index([category])
  @@index([rarity])
  @@index([isActive])
}

model UserAchievement {
  id                        Int           @id @default(autoincrement())
  unlockedAt                DateTime      @default(now())
  
  // Progress tracking (for incremental achievements)
  currentProgress           Int           @default(0)         // Current progress towards achievement
  isCompleted               Boolean       @default(true)      // Whether fully unlocked
  
  // Additional unlock data
  unlockData                Json?                             // Store context about how it was unlocked
  
  // Relations
  userId                    Int
  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId             Int
  achievement               Achievement   @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])  // Each user can only unlock each achievement once
  @@index([userId])
  @@index([unlockedAt])
}

enum AchievementCategory {
  QUIZ        // Quiz-related achievements (first quiz, perfect scores, etc.)
  BEEF        // Beef challenge achievements (wins, streaks, etc.)  
  LEARNING    // Learning milestones (topics mastered, hours studied)
  SOCIAL      // Social achievements (challenges sent, friends made)
  STREAK      // Activity streaks (daily login, weekly activity)
  COLLECTION  // Collection achievements (documents uploaded, folders created)
  SPECIAL     // Special/seasonal achievements
}

enum AchievementRarity {
  COMMON      // Easy to get, most users will unlock these
  UNCOMMON    // Moderate effort required
  RARE        // Significant achievement, takes dedication  
  EPIC        // Major milestone, few users achieve this
  LEGENDARY   // Extremely rare, exceptional accomplishment
}

// Phase 3.2: Elo rating history for comparative charts
model EloHistory {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  elo        Int
  changedAt  DateTime @default(now())
  source     String?
  note       String?

  @@index([userId, changedAt])
}