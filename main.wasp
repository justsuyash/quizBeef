app quizBeef {
  wasp: {
    version: "^0.16.3"
  },
  title: "Quiz Beef - The Gym for Your Brain",
  head: [
    "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
    "<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />",
    "<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />",
    "<link href=\"https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Manrope:wght@200..800&display=swap\" rel=\"stylesheet\" />"
  ],
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {},
      // google: {},
      // github: {},
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/play",
  },
  client: {
    rootComponent: import MainLayoutV15 from "@src/components/layout/main-layout-v15",
    setupFn: import QuerySetup from "@src/config/querySetup",
  },
  server: {
    middlewareConfigFn: import { serverMiddlewareFn } from "@src/config/serverSetup",
  },
}
// Real-time stats via SSE
api statsEvents {
  fn: import { statsEvents } from "@src/server/events/stats",
  httpRoute: (GET, "/api/stats-events"),
  entities: [User],
}

//#region Auth Routes
route SignupRoute { path: "/sign-up", to: Signup }
page Signup {
  component: import { Signup } from "@src/features/auth/signup"
}

route LoginRoute { path: "/login", to: Login }
page Login {
  component: import { Login } from "@src/features/auth/login"
}
//#endregion

route LandingRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/features/landing/index",
  authRequired: false
}



route PlayRoute { path: "/play", to: PlayPage }
page PlayPage {
  component: import PlayPage from "@src/features/play/index",
  authRequired: true
}

route NalandaRoute { path: "/nalanda", to: NalandaPage }
page NalandaPage {
  component: import NalandaPage from "@src/features/nalanda/index",
  authRequired: true
}

route NalandaModuleRoute { path: "/nalanda/module/:moduleId", to: NalandaModulePage }
page NalandaModulePage {
  component: import NalandaModulePage from "@src/features/nalanda/module",
  authRequired: true
}

route DashboardRoute { path: "/dashboard", to: Dashboard }
page Dashboard {
  component: import DashboardRedirect from "@src/features/dashboard/redirect-to-analytics",
  authRequired: true
}

route AnalyticsRoute { path: "/analytics", to: AnalyticsPage }
page AnalyticsPage {
  component: import EnhancedAnalytics from "@src/features/dashboard/enhanced-analytics",
  authRequired: true
}

route PlayRecommendedRoute { path: "/play/recommended", to: PlayRecommendedPage }
page PlayRecommendedPage {
  component: import PlayRecommendedPage from "@src/features/play/recommended",
  authRequired: true
}

route UploadRoute { path: "/upload", to: UploadPage }
page UploadPage {
  component: import UploadPage from "@src/features/documents/upload",
  authRequired: true
}

route DocumentsRoute { path: "/documents", to: DocumentsPage }
page DocumentsPage {
  component: import DocumentsPage from "@src/features/documents/index",
  authRequired: false
}

route FolderDetailRoute { path: "/documents/folder/:folderId", to: FolderDetailPage }
page FolderDetailPage {
  component: import FolderDetailPage from "@src/features/documents/folder-detail",
  authRequired: false
}

route LibraryRoute { path: "/library", to: LibraryPage }
page LibraryPage {
  component: import LibraryPage from "@src/features/library/index",
  authRequired: false
}

route QuizSettingsRoute { path: "/quiz/:documentId/settings", to: QuizSettingsPage }
page QuizSettingsPage {
  component: import QuizSettingsPage from "@src/features/quiz/settings",
  authRequired: true
}

route QuizTakeRoute { path: "/quiz/:documentId/take", to: QuizTakePage }
page QuizTakePage {
  component: import QuizTakePage from "@src/features/quiz/take",
  authRequired: true
}

route RapidFireRoute { path: "/quiz/rapid-fire", to: RapidFirePage }
page RapidFirePage {
  component: import RapidFirePage from "@src/features/quiz/modes/rapid-fire",
  authRequired: true
}

route FlashcardFrenzyRoute { path: "/quiz/flashcard-frenzy", to: FlashcardFrenzyPage }
page FlashcardFrenzyPage {
  component: import FlashcardFrenzyPage from "@src/features/quiz/modes/flashcard-frenzy",
  authRequired: true
}

route TimeAttackRoute { path: "/quiz/time-attack", to: TimeAttackPage }
page TimeAttackPage {
  component: import TimeAttackPage from "@src/features/quiz/modes/time-attack",
  authRequired: true
}

route QuizResultsRoute { path: "/quiz/:attemptId/results", to: QuizResultsPage }
page QuizResultsPage {
  component: import QuizResultsPage from "@src/features/quiz/results",
  authRequired: true
}

route QuizHistoryRoute { path: "/quiz-history", to: QuizHistoryPage }
page QuizHistoryPage {
  component: import QuizHistoryPage from "@src/features/quiz/history",
  authRequired: true
}

// Phase 4: Beef Challenge routes
route BeefLobbyRoute { path: "/beef", to: BeefLobbyPage }
page BeefLobbyPage {
  component: import BeefLobbyPage from "@src/features/beef/lobby",
  authRequired: true
}

route CreateBeefRoute { path: "/beef/create/:documentId", to: CreateBeefPage }
page CreateBeefPage {
  component: import CreateBeefPage from "@src/features/beef/create",
  authRequired: true
}

route BeefChallengeRoute { path: "/beef/:challengeId", to: BeefChallengePage }
page BeefChallengePage {
  component: import BeefChallengePage from "@src/features/beef/challenge",
  authRequired: true
}

// Profile routes
route UserProfileRoute { path: "/user/:userId", to: UserProfilePage }
page UserProfilePage {
  component: import UserProfilePage from "@src/features/profile/user-profile",
  authRequired: false
}

route AchievementsRoute { path: "/achievements", to: AchievementsPage }
page AchievementsPage {
  component: import AchievementsPage from "@src/features/achievements/achievements-page",
  authRequired: true
}

route LeaderboardRoute { path: "/leaderboard", to: LeaderboardPage }
page LeaderboardPage {
  component: import LeaderboardPage from "@src/features/profile/leaderboard",
  authRequired: false
}

route GroupLeaderboardRoute { path: "/leaderboard/groups", to: GroupLeaderboardPage }
page GroupLeaderboardPage {
  component: import GroupLeaderboardPage from "@src/features/profile/group-leaderboard",
  authRequired: true
}

route ChatsRoute { path: "/chats", to: ChatsPage }
page ChatsPage {
  component: import ChatsPage from "@src/features/chats/index",
  authRequired: true
}

route TasksRoute { path: "/tasks", to: TasksPage }
page TasksPage {
  component: import TasksPage from "@src/features/tasks/index",
  authRequired: true
}

route UsersRoute { path: "/users", to: UsersPage }
page UsersPage {
  component: import UsersPage from "@src/features/users/index",
  authRequired: true
}

route AppsRoute { path: "/apps", to: AppsPage }
page AppsPage {
  component: import AppsPage from "@src/features/apps/index",
  authRequired: true
}

route ProfilePageRoute { path: "/profile", to: ProfilePageComponent }
page ProfilePageComponent {
  component: import ProfilePage from "@src/features/profile/profile-page",
  authRequired: true
}

route SettingsRoute { path: "/settings", to: SettingsPage }
page SettingsPage {
  component: import UserSettings from "@src/features/settings/user-settings",
  authRequired: true
}

route SettingsAccountRoute { path: "/settings/account", to: SettingsAccountPage }
page SettingsAccountPage {
  component: import SettingsAccountPage from "@src/features/settings/account/index",
  authRequired: true
}

route SettingsAppearanceRoute { path: "/settings/appearance", to: SettingsAppearancePage }
page SettingsAppearancePage {
  component: import SettingsAppearancePage from "@src/features/settings/appearance/index",
  authRequired: true
}

route SettingsNotificationsRoute { path: "/settings/notifications", to: SettingsNotificationsPage }
page SettingsNotificationsPage {
  component: import SettingsNotificationsPage from "@src/features/settings/notifications/index",
  authRequired: true
}

route SettingsDisplayRoute { path: "/settings/display", to: SettingsDisplayPage }
page SettingsDisplayPage {
  component: import SettingsDisplayPage from "@src/features/settings/display/index",
  authRequired: true
}

route SettingsProfileRoute { path: "/settings/profile", to: SettingsProfilePage }
page SettingsProfilePage {
  component: import SettingsProfilePage from "@src/features/settings/profile/index",
  authRequired: true
}

route ThemePreviewRoute { path: "/theme-preview", to: ThemePreviewPage }
page ThemePreviewPage {
  component: import ThemePreviewPage from "@src/features/settings/theme-preview",
  authRequired: false
}

route AdminRoute { path: "/admin", to: AdminPage }
page AdminPage {
  component: import AdminPage from "@src/features/admin/index",
  authRequired: true
}

// Error and utility routes
route GeneralErrorRoute { path: "/general-error", to: GeneralError }
page GeneralError {
  component: import GeneralError from "@src/features/errors/general-error"
}

route NotFoundRoute { path: "/not-found", to: NotFound }
page NotFound {
  component: import NotFound from "@src/features/errors/not-found-error"
}

route MaintenanceRoute { path: "/maintenance", to: Maintenance }
page Maintenance {
  component: import Maintenance from "@src/features/errors/maintenance-error"
}

route UnauthorizedRoute { path: "/unauthorized", to: Unauthorized }
page Unauthorized {
  component: import Unauthorized from "@src/features/errors/unauthorized-error"
}

route ForbiddenRoute { path: "/forbidden", to: Forbidden }
page Forbidden {
  component: import Forbidden from "@src/features/errors/forbidden"
}

// User operations
query getCurrentUser {
  fn: import { getCurrentUser } from "@src/features/auth/operations",
  entities: [User]
}

// Document operations
action processContent {
  fn: import { processContent } from "@src/features/documents/operations",
  entities: [Document, User, Question, Answer]
}

query getMyDocuments {
  fn: import { getMyDocuments } from "@src/features/documents/operations",
  entities: [Document, User]
}

action generateQuiz {
  fn: import { generateQuiz } from "@src/features/documents/operations",
  entities: [Document, Question, Answer, User]
}

query getDocumentQuestions {
  fn: import { getDocumentQuestions } from "@src/features/documents/operations",
  entities: [Document, Question, Answer, User]
}

// Quiz operations
action startQuiz {
  fn: import { startQuiz } from "@src/features/quiz/operations",
  entities: [Document, Question, Answer, QuizAttempt, UserQuestionHistory, User]
}

action submitQuizAnswer {
  fn: import { submitQuizAnswer } from "@src/features/quiz/operations",
  entities: [QuizAttempt, UserQuestionHistory, Question, Answer, User]
}

action completeQuiz {
  fn: import { completeQuiz } from "@src/features/quiz/operations",
  entities: [QuizAttempt, UserQuestionHistory, Question, User]
}

action seedQuizData {
  fn: import { seedQuizData } from "@src/features/quiz/seed-data",
  entities: [Document, Question, Answer, User]
}

action startGameMode {
  fn: import { startGameMode } from "@src/features/quiz/game-mode-operations",
  entities: [Document, Question, Answer, QuizAttempt, UserQuestionHistory, User]
}

query getQuizAttempt {
  fn: import { getQuizAttempt } from "@src/features/quiz/operations",
  entities: [QuizAttempt, Question, Answer, UserQuestionHistory, Document, User]
}

query getQuizHistory {
  fn: import { getQuizHistory } from "@src/features/quiz/operations",
  entities: [QuizAttempt, Document, User]
}

// Dashboard Analytics operations
query getUserAnalytics {
  fn: import { getUserAnalytics } from "@src/features/dashboard/operations",
  entities: [User, Document, QuizAttempt, UserQuestionHistory]
}

query getLearningProgress {
  fn: import { getLearningProgress } from "@src/features/dashboard/operations",
  entities: [User, QuizAttempt, UserQuestionHistory]
}

query getPerformanceTrends {
  fn: import { getPerformanceTrends } from "@src/features/dashboard/operations",
  entities: [User, Document, QuizAttempt, UserQuestionHistory]
}

query getEnrichedAnalytics {
  fn: import { getEnrichedAnalytics } from "@src/features/dashboard/operations",
  entities: [User, Document, QuizAttempt, UserQuestionHistory]
}

query getCategoryMetrics {
  fn: import { getCategoryMetrics } from "@src/features/dashboard/operations",
  entities: [User, Document, QuizAttempt]
}

query getOptimalLearningTime {
  fn: import { getOptimalLearningTime } from "@src/features/dashboard/operations",
  entities: [User, QuizAttempt]
}

// v1.7: Stats Pill and enhanced analytics
query getStatsOverview {
  fn: import { getStatsOverview } from "@src/features/dashboard/operations",
  entities: [User, QuizAttempt, UserQuestionHistory, UserAchievement, Document, QloHistory]
}

// v1.7: Play flow suggestions and random quiz
query getPlaySuggestions {
  fn: import { getPlaySuggestions } from "@src/features/quiz/operations",
  entities: [User, QuizAttempt, Document, Folder]
}

action startRandomQuiz {
  fn: import { startRandomQuiz } from "@src/features/quiz/operations",
  entities: [User, Document, Question, Answer, QuizAttempt, UserQuestionHistory]
}

action startCategoryPractice {
  fn: import { startCategoryPractice } from "@src/features/quiz/operations",
  entities: [User, Document, Question, Answer, QuizAttempt, UserQuestionHistory]
}

// Folder and Document Organization operations
action createFolder {
  fn: import { createFolder } from "@src/features/documents/folder-operations",
  entities: [User, Folder]
}

action updateFolder {
  fn: import { updateFolder } from "@src/features/documents/folder-operations",
  entities: [User, Folder]
}

action deleteFolder {
  fn: import { deleteFolder } from "@src/features/documents/folder-operations",
  entities: [User, Folder, Document]
}

query getUserFolders {
  fn: import { getUserFolders } from "@src/features/documents/folder-operations",
  entities: [User, Folder]
}

action updateDocumentFolder {
  fn: import { updateDocumentFolder } from "@src/features/documents/folder-operations",
  entities: [User, Document, Folder]
}

action deleteDocument {
  fn: import { deleteDocument } from "@src/features/documents/operations",
  entities: [User, Document, Question, Answer]
}

//#region Achievements
action grantAchievement {
  fn: import { grantAchievement } from "@src/features/achievements/operations",
  entities: [User, Achievement, UserAchievement]
}

action checkAchievements {
  fn: import { checkAchievements } from "@src/features/achievements/operations", 
  entities: [User, Achievement, UserAchievement, QuizAttempt, BeefChallenge, BeefParticipant]
}

query getUserAchievements {
  fn: import { getUserAchievements } from "@src/features/achievements/operations",
  entities: [User, Achievement, UserAchievement]
}

query getAllAchievements {
  fn: import { getAllAchievements } from "@src/features/achievements/operations",
  entities: [Achievement]
}

action seedAchievements {
  fn: import { seedAchievements } from "@src/features/achievements/operations",
  entities: [Achievement]
}
//#endregion

query searchDocuments {
  fn: import { searchDocuments } from "@src/features/documents/folder-operations",
  entities: [User, Document, Folder]
}

// Advanced Quiz Generation operations
action generateQuizFromFolder {
  fn: import { generateQuizFromFolder } from "@src/features/quiz/advanced-operations",
  entities: [User, Document, Folder, Question, Answer, QuizAttempt, UserQuestionHistory]
}

query getSuggestedQuestionCount {
  fn: import { getSuggestedQuestionCount } from "@src/features/quiz/advanced-operations",
  entities: [User, Document, Folder]
}

// Helper action to generate questions for existing documents
action generateQuestionsForDocument {
  fn: import { generateQuestionsForDocument } from "@src/features/documents/operations",
  entities: [User, Document, Question, Answer]
}

// Bulk question generation for multiple documents
action generateQuestionsForMultipleDocuments {
  fn: import { generateQuestionsForMultipleDocuments } from "@src/features/documents/operations",
  entities: [User, Document, Question, Answer]
}

// Phase 4: Beef Challenge operations
action createBeef {
  fn: import { createBeef } from "@src/features/beef/operations",
  entities: [User, Document, BeefChallenge, BeefParticipant]
}

action joinBeef {
  fn: import { joinBeef } from "@src/features/beef/operations",
  entities: [User, BeefChallenge, BeefParticipant]
}

action startBeef {
  fn: import { startBeef } from "@src/features/beef/operations",
  entities: [User, BeefChallenge, BeefParticipant, BeefRound, Document, Question, Answer]
}

action submitBeefAnswer {
  fn: import { submitBeefAnswer } from "@src/features/beef/operations",
  entities: [User, BeefChallenge, BeefParticipant, BeefRound, BeefAnswer, Question, Answer]
}

query getBeefChallenge {
  fn: import { getBeefChallenge } from "@src/features/beef/operations",
  entities: [User, BeefChallenge, BeefParticipant, BeefRound, BeefAnswer, Document, Question, Answer]
}

query getActiveBeefs {
  fn: import { getActiveBeefs } from "@src/features/beef/operations",
  entities: [User, BeefChallenge, BeefParticipant, Document]
}

action leaveBeef {
  fn: import { leaveBeef } from "@src/features/beef/operations",
  entities: [User, BeefChallenge, BeefParticipant]
}

// Profile & User operations
query getUserProfile {
  fn: import { getUserProfile } from "@src/features/profile/operations",
  entities: [User, Document, QuizAttempt, BeefParticipant, BeefChallenge]
}

action updateUserProfile {
  fn: import { updateUserProfile } from "@src/features/profile/operations",
  entities: [User]
}

// Phase 1.1 – collect City/Country after signup
action updateProfileLocation {
  fn: import { updateProfileLocation } from "@src/features/auth/operations",
  entities: [User]
}

query getLeaderboard {
  fn: import { getLeaderboard } from "@src/features/profile/operations",
  entities: [User, BeefParticipant, Group, GroupMembership]
}

query getGroupLeaderboard {
  fn: import { getGroupLeaderboard } from "@src/features/profile/operations",
  entities: [User, Group, GroupMembership, BeefParticipant]
}

query getUserGroups {
  fn: import { getUserGroups } from "@src/features/profile/operations",
  entities: [Group, GroupMembership]
}

query getQloHistory {
  fn: import { getQloHistory } from "@src/features/profile/operations",
  entities: [User, QloHistory]
}

action seedDatabase {
    fn: import { seedDatabase } from "@src/features/admin/operations",
    entities: [User, Document, QuizAttempt, Achievement, UserAchievement, Folder, Question, Answer, UserQuestionHistory, QloHistory, Group, GroupMembership]
}

action resetMySeededData {
  fn: import { resetMySeededData } from "@src/features/admin/operations",
  entities: [User, Document, Folder, Question, Answer, QuizAttempt, UserQuestionHistory, UserAchievement, QloHistory]
}

action addRandomNinjas {
  fn: import { addRandomNinjas } from "@src/features/admin/operations",
  entities: [User]
}

action backfillMyAccount {
  fn: import { backfillMyAccount } from "@src/features/admin/operations",
  entities: [User, Document, Folder, Question, Answer, QuizAttempt, UserQuestionHistory, QloHistory, Achievement, UserAchievement]
}

action grantDemoAchievementsAll {
  fn: import { grantDemoAchievementsAll } from "@src/features/admin/operations",
  entities: [User, Achievement, UserAchievement]
}

action seedQloHistoryAll {
  fn: import { seedQloHistoryAll } from "@src/features/admin/operations",
  entities: [User, QloHistory]
}

action rebuildLeaderboardStatsAll {
  fn: import { rebuildLeaderboardStatsAll } from "@src/features/admin/operations",
  entities: [User, QuizAttempt]
}

